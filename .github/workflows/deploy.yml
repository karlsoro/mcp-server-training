name: MCP Server Training - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Quality Assurance
  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: latest
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .venv
          .uv/cache
        key: ${{ runner.os }}-uv-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv sync --frozen
    
    - name: Run linting
      run: |
        uv run flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        uv run black --check --diff src/ tests/
        uv run mypy src/ --ignore-missing-imports
    
    - name: Run security checks
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true
    
    - name: Run tests
      run: |
        uv run pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Deploy to AWS (Lambda)
  deploy-aws:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Build SAM application
      run: sam build
    
    - name: Deploy to AWS Lambda
      run: |
        sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name mcp-training-server \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            NotionApiToken=${{ secrets.NOTION_API_TOKEN }} \
            NotionDatabaseId=${{ secrets.NOTION_DATABASE_ID }} \
            GitHubToken=${{ secrets.GITHUB_TOKEN }} \
            OpenWeatherApiKey=${{ secrets.OPENWEATHER_API_KEY }}
    
    - name: Get Lambda function URL
      id: lambda-url
      run: |
        FUNCTION_URL=$(aws lambda get-function-url-config \
          --function-name mcp-training-server-MCPTrainingServer-* \
          --query 'FunctionUrl' \
          --output text)
        echo "url=$FUNCTION_URL" >> $GITHUB_OUTPUT
    
    - name: Comment deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Deployment Successful!**
          
          **AWS Lambda Function URL:** ${{ steps.lambda-url.outputs.url }}
          
          The MCP server has been deployed successfully to AWS Lambda.`
          })

  # Deploy to Google Cloud (Cloud Run)
  deploy-gcp:
    name: Deploy to Google Cloud Run
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Build and push to Google Container Registry
      run: |
        gcloud builds submit \
          --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/mcp-training-server:${{ github.sha }} \
          --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/mcp-training-server:latest
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy mcp-training-server \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/mcp-training-server:${{ github.sha }} \
          --platform managed \
          --region ${{ secrets.GCP_REGION }} \
          --allow-unauthenticated \
          --set-env-vars="LOG_LEVEL=INFO" \
          --set-secrets="NOTION_API_TOKEN=notion-token:latest" \
          --set-secrets="GITHUB_TOKEN=github-token:latest" \
          --set-secrets="OPENWEATHER_API_KEY=openweather-key:latest"
    
    - name: Get Cloud Run URL
      id: cloud-run-url
      run: |
        SERVICE_URL=$(gcloud run services describe mcp-training-server \
          --platform managed \
          --region ${{ secrets.GCP_REGION }} \
          --format 'value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
    
    - name: Comment deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `‚òÅÔ∏è **Google Cloud Deployment Successful!**
          
          **Cloud Run Service URL:** ${{ steps.cloud-run-url.outputs.url }}
          
          The MCP server has been deployed successfully to Google Cloud Run.`
          })

  # Deploy to Cloudflare (Workers)
  deploy-cloudflare:
    name: Deploy to Cloudflare Workers
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Wrangler CLI
      run: npm install -g wrangler
    
    - name: Deploy to Cloudflare Workers
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        wrangler publish \
          --name mcp-training-server \
          --compatibility-date 2024-01-01
    
    - name: Set Cloudflare secrets
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        echo "${{ secrets.NOTION_API_TOKEN }}" | wrangler secret put NOTION_API_TOKEN
        echo "${{ secrets.GITHUB_TOKEN }}" | wrangler secret put GITHUB_TOKEN
        echo "${{ secrets.OPENWEATHER_API_KEY }}" | wrangler secret put OPENWEATHER_API_KEY

  # Performance testing
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-aws, deploy-gcp]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Artillery
      run: npm install -g artillery
    
    - name: Run performance tests
      run: |
        artillery run tests/performance/load-test.yml
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: artillery-report.json

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-aws, deploy-gcp, deploy-cloudflare, performance]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          MCP Server Training deployment ${{ job.status }}
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          View deployment: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup Docker cache
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max 